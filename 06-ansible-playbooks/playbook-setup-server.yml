#!/usr/bin/env ansible-playbook
---
- hosts: dfaasctrl

  vars:
    pip_install_packages:
      - name: docker
    docker_users:
      - debian
    dfaas_nodes: [1, 2, 3]

  tasks:
    - name: Execute apt update only if the last one is more than 1 hour ago
      become: yes
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Ensure some basic apt packages are installed (and at the latest version)
      become: yes
      apt:
        name:
          - git
          - htop
          - nano
          - tmux
          - tree
          - wget
          - zip
          - curl
          - socat
          - hatop
          - jq
        state: latest

    - name: Ensure some necessary python2 packages are installed (and at the latest version)
      become: yes
      apt:
        name:
          - python-setuptools # Needed by the "geerlingguy.pip" Ansible role
          - python-docker # Needed by the "docker_container" Ansible module
          - rsync # Needed by the "synchronize" Ansible module
        state: latest

    - name: Copy the RSA private keys for the DFaaS agents libp2p hosts
      synchronize:
        # Trailing slash required! See http://qdosmsq.dunbar-it.co.uk/blog/2013/02/rsync-to-slash-or-not-to-slash/
        src: "{{playbook_dir}}/agents-private-keys/"
        dest: "/home/debian/agents-private-keys"
        perms: no # Do not preserve permissions (since we may run this playbook from WSL on Windows, hence permissions are rwx for everyone)
        delete: yes

    - name: Include the geerlingguy.pip role
      include_role: { name: geerlingguy.pip }
      vars: { ansible_become: yes }

    - name: Include the geerlingguy.docker role
      include_role: { name: geerlingguy.docker }
      vars: { ansible_become: yes }

    - name: Include the fubarhouse.golang role
      include_role: { name: fubarhouse.golang }
      vars: { ansible_become: yes }

    - name: Create the tsenart-vegeta directory if it does not exist
      file:
        path: /home/debian/tsenart-vegeta
        state: directory

    - name: Download and extract Vegeta
      unarchive:
        src: https://github.com/tsenart/vegeta/releases/download/v12.8.4/vegeta_12.8.4_linux_amd64.tar.gz
        dest: /home/debian/tsenart-vegeta
        remote_src: yes

    - name: Copy vegeta in /usr/bin (as root)
      become: yes
      copy:
        src: /home/debian/tsenart-vegeta/vegeta
        dest: /usr/bin/vegeta
        remote_src: yes
        mode: "0755"

    - name: Recursively remove the tsenart-vegeta directory
      file:
        path: /home/debian/tsenart-vegeta
        state: absent
    
    - name: Install the OpenFaaS CLI client
      become: yes
      shell:
        cmd: curl -sSL https://cli.openfaas.com/ | sh
        warn: no # Disable the "Consider using the get_url or uri module rather than running curl" warning message

    - name: Create the dfaasvolumeX directories (as root) if they do not exist
      become: yes
      file:
        path: /home/debian/dfaasvolume{{item}}
        state: directory
      loop: "{{dfaas_nodes}}"

    - name: Create the haproxy.cfg files (as root) if they do not exist
      become: yes
      file:
        path: /home/debian/dfaasvolume{{item}}/haproxy.cfg
        state: touch
      loop: "{{dfaas_nodes}}"

    - name: Create the shared Docker network
      become: yes
      docker_network:
        name: dfaasnetwork
        ipam_config:
          - subnet: 192.168.30.0/24
            gateway: 192.168.30.1

    - name: Nodes Docker containers (always-running debian) # Debian is useful for debugging
      become: yes
      docker_container:
        name: node{{item}}
        image: debian
        restart_policy: always
        keep_volumes: no # Do not retain **anonymous** volumes when the container is removed
        network_mode: dfaasnetwork
        networks:
          - name: dfaasnetwork
            ipv4_address: 192.168.30.10{{item}}
        networks_cli_compatible: yes
        ports:
          - 800{{item}}:80
        volumes:
          - /home/debian/dfaasvolume{{item}}:/dfaasvolume # Useful for debugging
        command: sleep infinity
        working_dir: /dfaasvolume
      loop: "{{dfaas_nodes}}"

    - name: HAProxy Docker containers
      become: yes
      docker_container:
        name: haproxy{{item}}
        image: haproxy
        restart_policy: always
        keep_volumes: no # Do not retain **anonymous** volumes when the container is removed

        network_mode: "container:node{{item}}"
        volumes:
          - /home/debian/dfaasvolume{{item}}:/dfaasvolume
        command: -f /dfaasvolume/haproxy.cfg
      loop: "{{dfaas_nodes}}"
